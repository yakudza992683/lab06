name: Build and Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  linux-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
        
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential cmake dpkg-dev rpm lcov
    
    - name: Configure project
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Debug \
              -DBUILD_TESTS=ON \
              -DCMAKE_CXX_FLAGS="--coverage" -DCMAKE_C_FLAGS="--coverage"
      
    - name: Build project
      run: cmake --build build --config Debug --parallel $(nproc)
      
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure
        
    - name: Generate coverage report
      run: |
        lcov --capture --directory build --output-file build/coverage.info --ignore-errors mismatch,unused --rc geninfo_unexecuted_blocks=1
        lcov --remove build/coverage.info '/usr/*' --output-file build/coverage.info
        genhtml build/coverage.info --output-directory build/coverage_report
        
    - name: Upload coverage to Coveralls
      uses: coverallsapp/github-action@v2
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: build/coverage.info

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-packages
        path: |
          build/*.tar.gz
          build/*.deb
          build/*.rpm
          build/coverage_report/**

  windows-build:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup WiX
      run: |
        choco install wixtoolset -y
        echo "WIX=C:\Program Files (x86)\WiX Toolset v3.11\bin" >> $GITHUB_ENV
        
    - name: Prepare license
      shell: pwsh
      run: |
        if (!(Test-Path "LICENSE.rtf")) {" " | Out-File -Encoding ASCII "LICENSE.rtf"}
    
    - name: Configure and build
      run: |
        cmake -B build -DCMAKE_BUILD_TYPE=Release
        cmake --build build --config Release
        
    - name: Generate MSI
      run: |
        cd build
        cpack -G WIX -C Release -V --debug
        
    - name: List Windows packages
      shell: pwsh
      run: |
        ls build/*.msi -File | % { $_.FullName }
        if (!(Test-Path "build/*.msi")) { Write-Output "No MSI package found" }
        
    - name: Upload Windows packages
      uses: actions/upload-artifact@v4
      with:
        name: windows-packages
        path: build/*.msi
        if-no-files-found: warn

  macos-build:
    runs-on: macos-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        submodules: recursive
    - name: Configure project
      run: cmake -B build -DCMAKE_BUILD_TYPE=Release -DBUILD_TESTS=ON
    - name: Build project
      run: cmake --build build --config Release --parallel 2
    - name: Run tests
      run: |
        cd build
        ctest --output-on-failure
    - name: Create DMG package
      run: |
        cd build
        cpack -G DragNDrop
        
    - name: List macOS packages
      run: |
        ls -la build/*.dmg || echo "No DMG package found"
        
    - name: Upload macOS packages
      uses: actions/upload-artifact@v4
      with:
        name: macos-packages
        path: build/*.dmg
        if-no-files-found: warn
